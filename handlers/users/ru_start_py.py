from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from keyboards.default.button import *
from keyboards.default.ru_button import *
from loader import dp, bot
from states.states import *
from utils.db_api.databace import *

fake_data = {}


@dp.message_handler(text="–†—É—Å—Å–∫–∏–πüá∑üá∫")
async def uzb_starthandler(message: types.Message):
    print(True)
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ</b> –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è", reply_markup=phone_number_btn_ru)
    await Register.phone_number.set()


@dp.message_handler(state=Register.phone_number, content_types=types.ContentType.CONTACT)
async def phone_number(message: types.Message, state: FSMContext):
    print(True)
    contact = message.contact
    user_id = message.from_user.id
    await add_user(user_id, int(contact.phone_number))
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüó∫</b> üìç", reply_markup=lokatsion_ru)
    await state.finish()
    await Register.location.set()


@dp.message_handler(state=Register.location, content_types=types.ContentType.LOCATION)
async def location(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    longitude = message.location.longitude
    latitude = message.location.latitude
    await update_location(user_id, longitude, latitude)
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b> üë§",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.finish()
    await Register.fullname.set()


@dp.message_handler(state=Register.fullname)
async def fullnamesave(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    fullname = message.text
    await update_fullname(user_id, fullname)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚úÖ", reply_markup=menu_btn_ru)
    await state.finish()


@dp.message_handler(text='–£—Å–ª—É–≥–∏ üíº')
async def xizmatlarr(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=xizmatlar_btn_ru)


@dp.message_handler(text='–í—Å–µ —É—Å–ª—É–≥–∏ üõ†')
async def jamixizmatlarr(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=jamixizmatlar_btn_ru)


@dp.message_handler(text='–û—á–∏—Å—Ç–∫–∞ –ù–∞–º–∞ üíß')
async def namxizmatlarr(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=nam_xizmatlar_btn_ru)


@dp.message_handler(text='–û—á–∏—Å—Ç–∫–∞ RoboClenda ü§ñ')
async def roboclean(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=Roboclean_btn_ru)


@dp.message_handler(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ ‚ûï")
async def qoshimchaxizmat(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=qoshimchaxizmatlar_ru)


@dp.message_handler(text="–ù–∞–∑–∞–¥ üîô", state="*")
async def back(message: types.Message):
    await message.answer(f"""
–í—ã–±–µ—Ä–∏—Ç–µ:
    """, reply_markup=menu_btn_ru)


@dp.message_handler(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")
async def settingsuser(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ‚¨áÔ∏è", reply_markup=settings_btn_ru)


@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû")
async def changephone(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await Register.phone_number.set()


@dp.message_handler(state=Register.phone_number)
async def phones(message: types.Message, state: FSMContext):
    phone_number = message.text
    if phone_number:
        if message.text.startswith("+998"):
            print(message.text[1:13])
            user_id = message.from_user.id
            await update_phone_number(user_id, phone_number)
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ", reply_markup=settings_btn_ru)
            await state.finish()
        else:
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +998 ‚ùå")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùå")


@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üë§")
async def changefullname(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
    await Register.fullname.set()


@dp.message_handler(state=Register.fullname)
async def fullnames(message: types.Message, state: FSMContext):
    fullname = message.text
    user_id = message.from_user.id
    await update_fullname(user_id, fullname)
    await message.answer("–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã ‚úÖ", reply_markup=settings_btn_ru)
    await state.finish()


@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üóë")
async def deleteaccount(message: types.Message):
    await delete_user(user_id=message.from_user.id)
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω ‚úÖ\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ /start",
                         reply_markup=types.ReplyKeyboardRemove())


async def generate_map_link(latitude, longitude):
    base_url = "https://www.google.com/maps?q="
    return f"{base_url}{latitude},{longitude}"


from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

@dp.message_handler(state=Category.name)
async def send_group_for_category(message: types.Message, state:FSMContext):
    user_id = message.from_user.id
    await record_stat(user_id)
    user_id = message.from_user.id
    keyboard_inline = InlineKeyboardMarkup()
    ha_button = InlineKeyboardButton(text="–î–∞‚úÖ", callback_data=f"haa {user_id}")
    yoq_button = InlineKeyboardButton(text="–ù–µ—Ç‚ùå", callback_data=f"yooq {user_id}")
    keyboard_inline.add(ha_button, yoq_button)
    global latitude_user_map
    global longitude_user_map
    await state.finish()
    category_name = message.text

    user = cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,)).fetchall()

    txt = ""
    for i in user:
        latitude_user_map = i[4]
        longitude_user_map = i[3]
    link = await generate_map_link(latitude_user_map,longitude_user_map)
    for i in user:
        txt += f"""<b>–ó–∞–∫–∞–∑: {category_name}‚úÖ</b>\n\n\n<b>–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:  <i>+{i[2]}</i>üìû</b>\n\n<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <i>{i[5]}üë§</i></b>\n\n<b> –õ–æ–∫–∞—Ü–∏—è üìç:  <a href="{link}">–õ–æ–∫–∞—Ü–∏—è</a></b>"""

    print(txt)
    await message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úÖ")
    await bot.send_message(chat_id = -1002173612484, text=txt, reply_markup=keyboard_inline)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("haa"))
async def process_ha_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.message.from_user.id
    await record_stat(user_id)
    user_id = callback_query.data.split()[1]
    await callback_query.message.answer(f"–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –ø—Ä–∏–Ω—è—Ç‚úÖ")
    await callback_query.bot.send_message(user_id, "<b>–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç‚úÖ</b>")


@dp.callback_query_handler(lambda c: c.data and c.data.startswith("yooq"))
async def process_yoq_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.message.from_user.id
    await record_stat(user_id)
    user_id = callback_query.data.split()[1]
    await callback_query.message.answer(f"–ó–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω‚ùå")
    await callback_query.bot.send_message(user_id, "<b>–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω‚ùå\n\n‚ö†Ô∏è<b>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ç–∞–∫–∞—è —É—Å–ª—É–≥–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞</b></b>")




con = sqlite3.connect(f'{DB_PATH}/stats.db')
cur = con.cursor()

cur.execute('''CREATE TABLE IF NOT EXISTS stats
                  (id INTEGER PRIMARY KEY AUTOINCREMENT,
                   user_id INTEGER,
                   date DATE)''')

con.commit()


async def record_stat(user_id):
    cur.execute("INSERT INTO stats (user_id, date) VALUES (?, DATE('now'))", (user_id,))
    con.commit()


@dp.message_handler(commands="admin", state="*")
async def admin_panel(message: types.Message , state: FSMContext):
    await state.finish()
    await record_stat(message.from_user.id)
    user = message.from_user.id
    Admins = 259083453, 2020292717
    if user in Admins:
        await message.answer("<b>–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —ç—Ç–æ–º –±–æ—Ç–µ üìåÔ∏è</b>", reply_markup=admin_btn_ru)
    else:
        pass


@dp.message_handler(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä")
async def show_stats(message: types.Message):
    await record_stat(message.from_user.id)
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM stats")
    total_users = cur.fetchone()[0]
    cur.execute("SELECT COUNT(DISTINCT user_id) FROM stats WHERE date = DATE('now')")
    today_users = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM stats")
    total_requests = cur.fetchone()[0]
    cur.execute("SELECT COUNT(*) FROM stats WHERE date = DATE('now')")
    today_requests = cur.fetchone()[0]
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞:\n" \
           f" ‚îú –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n" \
           f" ‚îú –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {today_users}\n" \
           f" ‚îú –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n" \
           f" ‚îî –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã: {today_requests}"
    await message.reply(text)
