from aiogram import types
from aiogram.dispatcher.filters.builtin import CommandStart
from keyboards.default.button import *
from keyboards.default.ru_button import menu_btn_ru, change_language_ru, phone_number_btn_ru, lokatsion_ru, \
    nam_xizmatlar_btn_ru
from loader import dp
from states.states import *
from utils.db_api.databace import *

fake_data = {}


@dp.message_handler(CommandStart())
async def bot_start(message: types.Message):
    user_id = message.from_user.id
    user = cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,)).fetchall()
    print(user)
    if user:
        await message.answer(f"""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user[0][5]}

–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ ‚úãüèº
""", reply_markup=menu_btn_ru)
    else:
        await message.answer(
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <i>{message.from_user.full_name}</i>üë§!\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —è–∑—ã–∫\n\nChoose your preferred languageüá∫üáø",
            reply_markup=change_language_ru)


@dp.message_handler(text="–£–∑–±–µ–∫—á–∞üá∫üáø")
async def uzb_starthandler(message: types.Message):
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ</b> –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è", reply_markup=phone_number_btn_ru)
    await Register.phone_number.set()


@dp.message_handler(state=Register.phone_number, content_types=types.ContentType.CONTACT)
async def phone_number(message: types.Message, state: FSMContext):
    print(True)
    contact = message.contact
    user_id = message.from_user.id
    await add_user(user_id, int(contact.phone_number))
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüó∫</b> üìç", reply_markup=lokatsion_ru)
    await state.finish()
    await Register.location.set()


@dp.message_handler(state=Register.location, content_types=types.ContentType.LOCATION)
async def location(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    longitude = message.location.longitude
    latitude = message.location.latitude
    await update_location(user_id, longitude, latitude)
    await message.answer("<b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é</b> üë§",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.finish()
    await Register.fullname.set()


@dp.message_handler(state=Register.fullname)
async def fullnamesave(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    fullname = message.text
    await update_fullname(user_id, fullname)
    await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å ‚úÖ", reply_markup=menu_btn_ru)
    await state.finish()


@dp.message_handler(text='–£—Å–ª—É–≥–∏ üíº')
async def xizmatlarr(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=xizmatlar_btn_ru)


@dp.message_handler(text='–í—Å–µ —É—Å–ª—É–≥–∏ üõ†')
async def jamixizmatlarr(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=jamixizmatlar_btn_ru)


@dp.message_handler(text='–û—á–∏—Å—Ç–∫–∞ –ù–∞–º–∞ üíß')
async def namxizmatlarr(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=nam_xizmatlar_btn_ru)


@dp.message_handler(text='–û—á–∏—Å—Ç–∫–∞ RoboClenda ü§ñ')
async def roboclean(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=Roboclean_btn_ru)


@dp.message_handler(text="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ ‚ûï")
async def qoshimchaxizmat(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∏–¥–æ–≤ —É—Å–ª—É–≥:", reply_markup=qoshimchaxizmatlar_ru)


@dp.message_handler(text="–ù–∞–∑–∞–¥ üîô", state="*")
async def back(message: types.Message):
    await message.answer(f"""
–í—ã–±–µ—Ä–∏—Ç–µ:
    """, reply_markup=menu_btn_ru)


@dp.message_handler(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è")
async def settingsuser(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ ‚¨áÔ∏è", reply_markup=settings_btn_ru)


@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû")
async def changephone(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    await Register.phone_number.set()


@dp.message_handler(state=Register.phone_number)
async def phones(message: types.Message, state: FSMContext):
    phone_number = message.text
    if phone_number:
        if message.text.startswith("+998"):
            print(message.text[1:13])
            user_id = message.from_user.id
            await update_phone_number(user_id, phone_number)
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω ‚úÖ", reply_markup=settings_btn_ru)
            await state.finish()
        else:
            await message.answer("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +998 ‚ùå")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚ùå")


@dp.message_handler(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é üë§")
async def changefullname(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é")
    await Register.fullname.set()


@dp.message_handler(state=Register.fullname)
async def fullnames(message: types.Message, state: FSMContext):
    fullname = message.text
    user_id = message.from_user.id
    await update_fullname(user_id, fullname)
    await message.answer("–í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã ‚úÖ", reply_markup=settings_btn_ru)
    await state.finish()


@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å üóë")
async def deleteaccount(message: types.Message):
    await delete_user(user_id=message.from_user.id)
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω ‚úÖ\n\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞–∂–º–∏—Ç–µ /start",
                         reply_markup=types.ReplyKeyboardRemove())
